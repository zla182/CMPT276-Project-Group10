Index: app/src/main/java/com/example/project276/MapsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project276;\n\nimport android.Manifest;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\nimport com.example.project276.Model.Inspection;\nimport com.example.project276.Model.ClusterItem;\nimport com.example.project276.Model.Restaurant;\nimport com.example.project276.Model.RestaurantManager;\nimport com.example.project276.UI.MainActivity;\nimport com.example.project276.UI.RestaurantActivity;\nimport com.google.android.gms.location.FusedLocationProviderClient;\nimport com.google.android.gms.maps.CameraUpdate;\nimport com.google.android.gms.location.LocationServices;\nimport com.google.android.gms.maps.CameraUpdateFactory;\nimport com.google.android.gms.maps.GoogleMap;\nimport com.google.android.gms.maps.OnMapReadyCallback;\nimport com.google.android.gms.maps.SupportMapFragment;\nimport com.google.android.gms.maps.model.BitmapDescriptor;\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.android.gms.maps.model.Marker;\nimport com.google.android.gms.maps.model.MarkerOptions;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.maps.android.clustering.Cluster;\nimport com.google.maps.android.clustering.ClusterManager;\nimport com.google.maps.android.clustering.view.DefaultClusterRenderer;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.FragmentManager;\n\nimport com.android.volley.Request;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.JsonObjectRequest;\nimport com.android.volley.toolbox.Volley;\nimport com.example.project276.UI.DownloadFragment;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\n\npublic class MapsActivity extends AppCompatActivity\n        implements\n        OnMapReadyCallback,\n        GoogleMap.OnCameraMoveStartedListener\n{\n\n    private GoogleMap mMap;\n    private Boolean mLocationPermissionsGranted = false;\n    private FusedLocationProviderClient fusedLocationProviderClient;\n    private ClusterManager<ClusterItem> clusterManager;\n    private Marker singleMarker;\n    private Boolean followUser = false;\n    private static int updateLocation = 0;\n    private static final String TAG = \"MapActivity\";\n    private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION;\n    private static final String COURSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION;\n    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1234;\n    public static final int ZOOM_STREETS = 15;\n    public static final int ZOOM_CITY = 10;\n    private RestaurantManager manager = RestaurantManager.getManager();\n    //extract from API\n    JSONObject restaurantJSON;\n    JSONObject inspectionJSON;\n    String restaurantsUrl;\n    String inspectionsUrl;\n    String restaurantDataDate;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_maps);\n        Log.d(\"MapsActivity\", \"Working onCreate\");\n\n        getLocationPermissionFromUser();\n\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n\n        wireLaunchListButton();\n    }\n\n    //https://stackoverflow.com/questions/40142331/how-to-request-location-permission-at-runtime\n    private void getLocationPermissionFromUser() {\n        Log.d(\"MapsActivity\", \"Working till get location permission\");\n        String[] permissions = {Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION};\n        if (ContextCompat.checkSelfPermission(this.getApplicationContext(), FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n            if (ContextCompat.checkSelfPermission(this.getApplicationContext(), COURSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n                mLocationPermissionsGranted = true;\n            } else {\n                ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE);\n            }\n        } else {\n            ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE);\n        }\n    }\n\n    private void getDeviceLocation() {\n        Log.d(\"MapsActivity\", \"Getting device location...\");\n        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\n        try {\n            if (mLocationPermissionsGranted) {\n                Task<Location> location = fusedLocationProviderClient.getLastLocation();\n                location.addOnCompleteListener(new OnCompleteListener() {\n                    @Override\n                    public void onComplete(@NonNull Task task) {\n                        if (task.isSuccessful()) {\n                            Log.d(\"MapsActivity\", \"Found \");\n                            Location currentLocation = (Location) task.getResult();\n                            followUser = true;\n                            moveCamera(new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude()), ZOOM_STREETS);\n                        } else {\n                            Log.d(\"MapsActivity\", \"NOT FOUND\");\n                            Toast.makeText(MapsActivity.this, \"Unable to get\", Toast.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n            }\n        } catch (SecurityException e) {\n            Log.e(TAG, \"getDeviceLocation: \" + e.getMessage());\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        Log.d(\"MapsActivity\", \"Working onRequestPermissionsResult\");\n        mLocationPermissionsGranted = false;\n        switch (requestCode) {\n            case LOCATION_PERMISSION_REQUEST_CODE: {\n                if (grantResults.length > 0) {\n                    int i = 0;\n                    while ( i < grantResults.length) {\n                        if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {\n                            mLocationPermissionsGranted = false;\n                            i++;\n                            return;\n                        }\n                    }\n                    mLocationPermissionsGranted = true;\n\n                    // Restart activity with new permission\n                    finish();\n                    Intent refreshIntent = makeIntent(this);\n                    overridePendingTransition(0, 0);\n                    startActivity(refreshIntent);\n                    overridePendingTransition(0, 0);\n                }\n            }\n        }\n    }\n\n    private void wireLaunchListButton() {\n        Button btn = findViewById(R.id.btnLaunchList);\n        btn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = MainActivity.makeIntent(MapsActivity.this);\n                finish();\n                startActivity(intent);\n            }\n        });\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        mMap = googleMap;\n\n        if (mLocationPermissionsGranted) {\n            if (\n                    ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)\n                            != PackageManager.PERMISSION_GRANTED\n                            &&\n                            ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)\n                                    != PackageManager.PERMISSION_GRANTED\n            ) {\n                return;\n            }\n            mMap.setMyLocationEnabled(true);\n            mMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {\n                @Override\n                public void onMyLocationChange(Location location) {\n                    // Don't constantly print to log\n                    if (updateLocation %5 == 0) {\n                        Log.d(TAG, \"onMyLocationChange: followUser: \" + followUser + \", updateIter: \" + updateLocation);\n                    }\n\n                    updateLocation++;\n                    if (followUser && (updateLocation %3 == 0)) {\n                        if (updateLocation > 8) {\n                            Log.d(TAG, \"onMyLocationChange: moveCamera()\");\n                            moveCamera(new LatLng(location.getLatitude(),location.getLongitude()), ZOOM_STREETS);\n                        }\n                    }\n                }\n            });\n        }\n\n        // Configure map UI\n        mMap.getUiSettings().setZoomControlsEnabled(true);\n        mMap.getUiSettings().setMyLocationButtonEnabled(true);\n\n        //Set Custom InfoWindow Adapter\n        CustomInfoAdapter adapter = new CustomInfoAdapter(MapsActivity.this);\n        mMap.setInfoWindowAdapter(adapter);\n\n        mMap.setOnCameraMoveStartedListener(this);\n\n        setUpClusterer();\n        clusterManager.cluster();\n        registerClickCallback();\n\n        // Move camera to Surrey first\n        LatLng surrey = new LatLng(49.104431, -122.801094);\n        moveCamera(surrey, ZOOM_CITY);\n\n        // Get chosen restaurant from intent (if it exists)\n        double[] chosenRestaurantLatLon = getChosenRestaurantLocation();\n        String chosenRestaurantName = getIntent().getStringExtra(RestaurantActivity.NAME);\n\n        Log.d(TAG, \"onMapReady: chosenRestaurantName: \" + chosenRestaurantName);\n        Log.d(TAG, \"onMapReady: chosenRestaurantLatLon = [\"\n                + chosenRestaurantLatLon[0]\n                + \",\" + chosenRestaurantLatLon[1] + \"]\");\n\n        LatLng restaurantCoord = null;\n        if (chosenRestaurantLatLon[0] == -1 || chosenRestaurantLatLon[1] == -1) {\n            Log.d(TAG, \"onMapReady: Setting map to user's location\");\n            getDeviceLocation();\n        } else {\n            Log.d(TAG, \"onMapReady: Setting map to chosen restaurant coords\");\n            Log.d(TAG, \"onMapReady: chosen restaurant lat: \"\n                    + chosenRestaurantLatLon[0] + \" chosen restaurant lon: \"\n                    + chosenRestaurantLatLon[1]);\n\n            restaurantCoord = new LatLng(\n                    chosenRestaurantLatLon[0],\n                    chosenRestaurantLatLon[1]\n            );\n\n            // Move camera to chosen restaurant\n            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(restaurantCoord, ZOOM_STREETS));\n\n            Restaurant restaurant = manager.findRestaurantByLocation(chosenRestaurantLatLon[0],\n                    chosenRestaurantLatLon[1], chosenRestaurantName);\n\n            // Confirm we have the correct position\n            if (restaurant.getLongitude() ==  chosenRestaurantLatLon[1] &&\n                    restaurant.getLatitude() ==  chosenRestaurantLatLon[0])\n            {\n                // Add a marker and display it's window, delete when the user pans\n                singleMarker = mMap.addMarker(new MarkerOptions()\n                        .position(restaurantCoord)\n                        .icon(getHazardIcon(restaurant))\n                        .title(chosenRestaurantName));\n                singleMarker.showInfoWindow();\n            }\n        }\n    }\n\n    private void setUpClusterer() {\n        // Initialize new clusterManager\n        clusterManager = new ClusterManager<ClusterItem>(this, mMap);\n\n        mMap.setOnCameraIdleListener(clusterManager);\n        mMap.setOnMarkerClickListener(clusterManager);\n        clusterManager.setRenderer(new MarkerClusterRenderer(getApplicationContext(), mMap, clusterManager));\n        populateMapWithMarkers();\n    }\n\n    private void populateMapWithMarkers() {\n        // Get Singleton RestaurantManager\n        RestaurantManager manager = RestaurantManager.getManager();\n        Log.d(TAG, \"populateMapWithMarkers: Populating map with markers\");\n\n        for (Restaurant restaurant : manager) {\n            ClusterItem clusterItem = new ClusterItem(\n                    restaurant.getLatitude(),\n                    restaurant.getLongitude(),\n                    restaurant.getName(),\n                    getHazardIcon(restaurant)\n            );\n            clusterManager.addItem(clusterItem);\n        }\n    }\n\n    private BitmapDescriptor getHazardIcon(Restaurant restaurant) {\n        Inspection RecentInspection = restaurant.getSingleInspection(0);\n        BitmapDescriptor hazardIcon;\n        if (RecentInspection != null) {\n            String hazardLevel = RecentInspection.getHazardRating();\n            if (hazardLevel.equals(\"Low\")) {\n                hazardIcon = bitmapDescriptorFromVector(this, R.drawable.peg_green);\n            } else if (hazardLevel.equals(\"Moderate\")) {\n                hazardIcon = bitmapDescriptorFromVector(this, R.drawable.peg_yellow);\n            } else {\n                hazardIcon = bitmapDescriptorFromVector(this, R.drawable.peg_red);\n            }\n        } else {\n            hazardIcon = bitmapDescriptorFromVector(this, R.drawable.peg_no_inspection);\n        }\n        return hazardIcon;\n    }\n\n    private double[] getChosenRestaurantLocation() {\n        // Return as [lat,long]\n        double restaurantLatitude = getIntent()\n                .getDoubleExtra(RestaurantActivity.lat,-1);\n        double restaurantLongitude = getIntent()\n                .getDoubleExtra(RestaurantActivity.lon,-1);\n        return new double[]{restaurantLatitude, restaurantLongitude};\n    }\n\n    private void registerClickCallback() {\n        mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {\n            @Override\n            public void onInfoWindowClick(Marker marker) {\n                // Find the restaurant we need to open for RestaurantActivity\n                LatLng latLngF = marker.getPosition();\n                double lat = latLngF.latitude;\n                double lng = latLngF.longitude;\n                String restaurantName = marker.getTitle();\n                Restaurant restaurant = manager.findRestaurantByLocation(lat, lng, restaurantName);\n                int restaurantIndex = manager.findIndex(restaurant);\n\n                // Launch RestaurantActivity with the correct index\n                Intent intent = RestaurantActivity.makeLaunchIntent(MapsActivity.this);\n                intent.putExtra(MainActivity.restaurantIndex, restaurantIndex);\n                startActivity(intent);\n            }\n        });\n\n        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\n            @Override\n            public boolean onMarkerClick(Marker marker) {\n                moveCamera(marker.getPosition());\n                marker.showInfoWindow();\n                Log.d(TAG, \"onMarkerClick: Marker clicked, setting followUser to false\");\n                followUser = false;\n                return true;\n            }\n        });\n\n        mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\n            @Override\n            public void onMapClick(LatLng latLng) {\n                followUser = false;\n            }\n        });\n\n        mMap.setOnMyLocationButtonClickListener(new GoogleMap.OnMyLocationButtonClickListener() {\n            @Override\n            public boolean onMyLocationButtonClick() {\n                followUser = true;\n                return false;\n            }\n        });\n\n        clusterManager.setOnClusterClickListener(new ClusterManager.OnClusterClickListener<ClusterItem>() {\n            @Override\n            public boolean onClusterClick(Cluster<ClusterItem> cluster) {\n                moveCamera(cluster.getPosition(), ZOOM_STREETS);\n                followUser = false;\n                return true;\n            }\n        });\n    }\n\n    private void moveCamera(LatLng latLng, float zoom) {\n        Log.d(TAG, \"moveCamera (zoom): moving: \" + latLng + \", zoom: \" + zoom);\n        CameraUpdate location = CameraUpdateFactory.newLatLngZoom(latLng, zoom);\n        mMap.animateCamera(location);\n    }\n\n    private void moveCamera(LatLng latLng) {\n        Log.d(TAG, \"moveCamera : moving: \" + latLng);\n        CameraUpdate location = CameraUpdateFactory.newLatLng(latLng);\n        mMap.animateCamera(location);\n    }\n\n    public static Intent makeIntent(Context context) {\n        return new Intent(context, MapsActivity.class);\n    }\n\n    @Override\n    public void onCameraMoveStarted(int reason) {\n        switch (reason) {\n            case GoogleMap.OnCameraMoveStartedListener.REASON_GESTURE:\n                followUser = false;\n                if (singleMarker != null) {\n                    singleMarker.remove();\n                    singleMarker = null;\n                }\n        }\n    }\n\n    private void saveAppLastUpdated(long currentDateInMs) {\n        SharedPreferences prefs = this.getSharedPreferences(\"AppPrefs\", MODE_PRIVATE);\n        SharedPreferences.Editor editor = prefs.edit();\n        editor.putLong(\"appLastUpdated\", currentDateInMs);\n        editor.apply();\n    }\n\n    static public long getAppLastUpdated(Context context) {\n        SharedPreferences prefs = context.getSharedPreferences(\"AppPrefs\", MODE_PRIVATE);\n        return prefs.getLong(\"appLastUpdated\", -1);\n    }\n\n    private class CustomInfoAdapter implements GoogleMap.InfoWindowAdapter {\n\n        private Activity context;\n\n        public CustomInfoAdapter(Activity context) {\n            this.context = context;\n        }\n\n        @Override\n        public View getInfoWindow(Marker marker) {\n            return null;\n        }\n\n        @Override\n        public View getInfoContents(Marker marker) {\n            View itemView = context.getLayoutInflater().inflate(R.layout.map_infor, null);\n\n            // Find the restaurant to work with.\n            LatLng latLngF = marker.getPosition();\n            double lat = latLngF.latitude;\n            double lng = latLngF.longitude;\n            Restaurant restaurant = null;\n            restaurant = manager.findRestaurantByLocation(lat, lng, marker.getTitle());\n            if (restaurant == null){\n                Log.d(TAG, \"Cluster Click!\");\n                return null;\n            }\n\n            ImageView logo = itemView.findViewById(R.id.info_item_restaurantLogo);\n            logo.setImageResource(restaurant.getIconID());\n\n            TextView restaurantNameText = itemView.findViewById(R.id.info_item_restaurantName);\n            restaurantNameText.setText(restaurant.getName());\n\n            TextView addressText = itemView.findViewById(R.id.info_item_address);\n            addressText.setText(restaurant.getAddress());\n\n            TextView lastInspectionText = itemView.findViewById(R.id.info_item_lastInspection);\n            ImageView hazard = itemView.findViewById(R.id.info_item_hazardImage);\n\n            Inspection recentInspection = null;\n            if (restaurant.getInspectionSize() > 0) {\n                recentInspection = restaurant.getInspectionList().get(0);\n                lastInspectionText.setText(\n                        getString(\n                                R.string.last_inspection_date,\n                                recentInspection.inspectionDate())\n                );\n\n                String level = recentInspection.getHazardRating();\n                if (level.equals(\"Low\")) {\n                    hazard.setImageResource(R.drawable.green);\n                } else if (level.equals(\"Moderate\")) {\n                    hazard.setImageResource(R.drawable.yellow);\n                } else {\n                    hazard.setImageResource(R.drawable.red);\n                }\n            } else {\n                // Leave text as default\n                hazard.setImageResource(R.drawable.exception);\n            }\n            return itemView;\n        }\n    }\n\n    // For peg icon\n    // Learned from:https://stackoverflow.com/questions/42365658/custom-marker-in-google-maps-in-android-with-vector-asset-icon\n    private BitmapDescriptor bitmapDescriptorFromVector(Context context, int vectorResId) {\n        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);\n        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());\n        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(),\n                vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(bitmap);\n        vectorDrawable.draw(canvas);\n        return BitmapDescriptorFactory.fromBitmap(bitmap);\n    }\n\n    private class MarkerClusterRenderer extends DefaultClusterRenderer<ClusterItem> {\n\n        public MarkerClusterRenderer(Context context, GoogleMap map,\n                                     ClusterManager<ClusterItem> clusterManager) {\n            super(context, map, MapsActivity.this.clusterManager);\n        }\n\n        @Override\n        protected void onBeforeClusterItemRendered(ClusterItem item, MarkerOptions markerOptions) {\n            markerOptions.icon(item.getHazard());\n            markerOptions.title(item.getTitle());\n            super.onBeforeClusterItemRendered(item, markerOptions);\n        }\n\n        @Override\n        protected boolean shouldRenderAsCluster(Cluster<ClusterItem> cluster) {\n            return (cluster.getSize() >= 8);\n        }\n    }\n\n    //Retrieve the most recent update date\n    private void checkUpdateDate() {\n        String urlRestaurants = \"https://data.surrey.ca/api/3/action/package_show?id=restaurants\";\n        RequestQueue queue = Volley.newRequestQueue(MapsActivity.this);\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest\n                (Request.Method.GET, urlRestaurants, new JSONObject(), new Response.Listener<JSONObject>() {\n\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        //Handle Success\n                        restaurantJSON = response;\n                        try {\n                            restaurantDataDate = restaurantJSON.getJSONObject(\"result\")\n                                    .getJSONArray(\"resources\")\n                                    .getJSONObject(0)\n                                    .getString(\"last_modified\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n\n                        //Log for testing\n                        Log.d(\"urlDate\", \"\"+ restaurantDataDate);\n\n                        //Once date is fetched, call moreThanTwentyHours() to check if it's been more than twenty hours\n                        //This call will launch the DownloadFragment popup if it has been more than 20 hours\n                        try {\n                            moreThanTwentyHours(restaurantDataDate);\n                        } catch (ParseException e) {\n                            e.printStackTrace();\n                            Log.d(\"errorMoreThanTwentyHours\", e.toString());\n                        }\n                    }\n                }, new Response.ErrorListener() {\n\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        //Handle error\n                        Log.d(\"error\", \"\"+error.toString());\n                    }\n                });\n        queue.add(jsonObjectRequest);\n    }\n\n    //If there is new update, then initiate the fragment;\n    private void moreThanTwentyHours(String lastDate) throws ParseException {\n        //Check if there has been a new update within 20 hours\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n        //20 hours in milliseconds\n        final long MILLIS_IN_TWENTY_HOURS = 20 * 60 * 60 * 1000L;\n\n        //convert the fetched date to milliseconds\n        //String testWithinTwentyHours = \"2020-11-17T08:00:00\";\n        long lastUpdatedMilliseconds = sdf.parse(lastDate).getTime();\n\n        //current time in milliseconds\n        long currentTimeMilliseconds = System.currentTimeMillis();\n\n        //boolean value to check if its been more than 20 hours\n        boolean moreThanTwentyHours = Math.abs(lastUpdatedMilliseconds - currentTimeMilliseconds) > MILLIS_IN_TWENTY_HOURS;\n\n        //set new url and show download popup fragment if it has been more than 20 hours\n        if(moreThanTwentyHours){\n            setRestaurantsUrl();\n            setInspectionsUrl();\n            showDownloadOption();\n        }\n\n    }\n\n    //Retrieve the restaurants csv url from the API\n    private void setRestaurantsUrl() {\n        String urlRestaurants = \"https://data.surrey.ca/api/3/action/package_show?id=restaurants\";\n        RequestQueue queue = Volley.newRequestQueue(MapsActivity.this);\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest\n                (Request.Method.GET, urlRestaurants, new JSONObject(), new Response.Listener<JSONObject>() {\n\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        //Handle Success\n                        restaurantJSON = response;\n                        try {\n                            restaurantsUrl = restaurantJSON.getJSONObject(\"result\")\n                                    .getJSONArray(\"resources\")\n                                    .getJSONObject(0)\n                                    .getString(\"original_url\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        //Log for testing\n                        Log.d(\"url\", \"\"+restaurantsUrl);\n                    }\n                }, new Response.ErrorListener() {\n\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        //Handle error\n                        Log.d(\"error\", \"\"+error.toString());\n                    }\n                });\n        queue.add(jsonObjectRequest);\n    }\n\n    //Retrieve the inspections csv url from the API\n    private void setInspectionsUrl() {\n        String urlInspections = \"https://data.surrey.ca/api/3/action/package_show?id=fraser-health-restaurant-inspection-reports\";\n        RequestQueue queue = Volley.newRequestQueue(MapsActivity.this);\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest\n                (Request.Method.GET, urlInspections, new JSONObject(), new Response.Listener<JSONObject>() {\n\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        //Handle Success\n                        inspectionJSON = response;\n                        try {\n                            inspectionsUrl = inspectionJSON.getJSONObject(\"result\")\n                                    .getJSONArray(\"resources\")\n                                    .getJSONObject(0)\n                                    .getString(\"original_url\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        //Log for testing\n                        Log.d(\"url\", \"\"+inspectionsUrl);\n                    }\n                }, new Response.ErrorListener() {\n\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        //Handle error\n                        Log.d(\"error\", \"\"+error.toString());\n                    }\n                });\n        queue.add(jsonObjectRequest);\n    }\n\n    //Initiates the fragment to show use if they want to update or not\n    private void showDownloadOption() {\n        FragmentManager frag = getSupportFragmentManager();\n        DownloadFragment dialog = new DownloadFragment();\n        dialog.show(frag, \"MessageDialog\");\n    }\n\n    //initiate download and write to the new csv file (This method is called from DownloadFragment);\n    public void initiateDownload(){\n        //Testing if method is being called with Toast\n        Toast.makeText(MapsActivity.this, \"Download Initiated\", Toast.LENGTH_SHORT).show();\n\n        SharedPreferences prefs = getSharedPreferences(\"LastUpdated\", MODE_PRIVATE);\n        @SuppressLint(\"CommitPrefEdits\") SharedPreferences.Editor editor = prefs.edit();\n        editor.putString(\"Date\",restaurantDataDate);\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project276/MapsActivity.java	(revision de94b375032cb4061e9533ecac09679632eee4b5)
+++ app/src/main/java/com/example/project276/MapsActivity.java	(date 1605740081000)
@@ -71,7 +71,7 @@
 import java.text.SimpleDateFormat;
 
 
-public class MapsActivity extends AppCompatActivity
+public class MapsActivity<FusedLocationProviderClient, ClusterManager> extends AppCompatActivity
         implements
         OnMapReadyCallback,
         GoogleMap.OnCameraMoveStartedListener
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.2\"\n\n    defaultConfig {\n        applicationId \"com.example.project276\"\n        minSdkVersion 29\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\n    implementation \"com.google.android.gms:play-services-location:17.0.0\"\n    implementation 'com.google.android.material:material:1.0.0'\n    implementation 'com.google.maps.android:android-maps-utils:0.5+'\n    testImplementation 'junit:junit:4.12'\n    // testImplementation 'org.junit.jupiter:junit-jupiter'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n    implementation 'com.squareup.okhttp3:okhttp:3.10.0'\n\n\n    implementation 'com.google.code.gson:gson:2.8.6'\n    implementation 'com.android.volley:volley:1.1.0'\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision de94b375032cb4061e9533ecac09679632eee4b5)
+++ app/build.gradle	(date 1605740083000)
@@ -11,6 +11,7 @@
         versionCode 1
         versionName "1.0"
 
+
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
     }
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"PLATFORM\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"1.8\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision de94b375032cb4061e9533ecac09679632eee4b5)
+++ .idea/gradle.xml	(date 1605740043000)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
